<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="team.kas.anime.dao.VideoMapper" >
  <resultMap id="BaseResultMap" type="team.kas.anime.pojo.Video" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="uId" property="uid" jdbcType="VARCHAR" />
    <result column="video_desc" property="videoDesc" jdbcType="VARCHAR" />
    <result column="video_path" property="videoPath" jdbcType="VARCHAR" />
    <result column="video_seconds" property="videoSeconds" jdbcType="REAL" />
    <result column="cover_path" property="coverPath" jdbcType="VARCHAR" />
    <result column="like_counts" property="likeCounts" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="play_counts" property="playCounts" jdbcType="BIGINT" />
    <result column="comments" property="comments" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from videos
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="team.kas.anime.pojo.Video" >
    insert into videos (id, uId, video_desc, 
      video_path, video_seconds, cover_path, 
      like_counts, status, play_counts, 
      comments, create_time, remark
      )
    values (#{id,jdbcType=VARCHAR}, #{uid,jdbcType=VARCHAR}, #{videoDesc,jdbcType=VARCHAR}, 
      #{videoPath,jdbcType=VARCHAR}, #{videoSeconds,jdbcType=REAL}, #{coverPath,jdbcType=VARCHAR}, 
      #{likeCounts,jdbcType=BIGINT}, #{status,jdbcType=INTEGER}, #{playCounts,jdbcType=BIGINT}, 
      #{comments,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="team.kas.anime.pojo.Video" >
    update videos
    set uId = #{uid,jdbcType=VARCHAR},
      video_desc = #{videoDesc,jdbcType=VARCHAR},
      video_path = #{videoPath,jdbcType=VARCHAR},
      video_seconds = #{videoSeconds,jdbcType=REAL},
      cover_path = #{coverPath,jdbcType=VARCHAR},
      like_counts = #{likeCounts,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      play_counts = #{playCounts,jdbcType=BIGINT},
      comments = #{comments,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select id, uId, video_desc, video_path, video_seconds, cover_path, like_counts, status, 
    play_counts, comments, create_time, remark
    from videos
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, uId, video_desc, video_path, video_seconds, cover_path, like_counts, status, 
    play_counts, comments, create_time, remark
    from videos where uId=#{userid} limit #{page},#{limit}
  </select>
<!--  以某一列排序，查询前n个-->
  <select id="selectByCountsUp" resultMap="BaseResultMap" >
    SELECT videos.id, users.nickname AS uId, video_desc, video_path, video_seconds, cover_path, like_counts, STATUS,
    play_counts, comments, create_time, videos.remark
    FROM videos,users WHERE videos.uId=users.id ORDER BY
     <if test="string=='time'">
       create_time ASC LIMIT 8
     </if>
    <if test="string=='like'">
      like_counts asc limit 4
    </if>
  </select>
  <select id="selectByNum" resultMap="BaseResultMap" >
    SELECT videos.id, users.nickname AS uId, video_desc, video_path, video_seconds, cover_path, like_counts, STATUS,
    play_counts, comments, create_time, videos.remark
    FROM videos,users WHERE videos.uId=users.id ORDER BY create_time asc limit #{num},#{number}
  </select>
  <select id="selectByNumber" resultMap="BaseResultMap" >
    SELECT videos.id,uId, video_desc, video_path, video_seconds, cover_path, like_counts, STATUS,
    play_counts, comments, create_time, videos.remark
    FROM videos,users WHERE videos.uId=users.id ORDER BY create_time asc limit #{i},#{j}
  </select>
  <update id="updateByLike">
    update videos
    set like_counts = #{num}
    where id = #{id}
  </update>
  <select id="getCount"  resultType="integer">
    select count(id) from videos
  </select>
</mapper>